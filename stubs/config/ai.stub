{{{
  exports({ to: app.configPath('ai.ts') })
}}}
import env from '#start/env'
import { defineConfig, services } from '@awalsolution/adonis-ai'

const aiConfig = defineConfig({
  default: env.get('AI_DRIVER'),
  /**
   * The services object can be used to configure multiple AI services
   * each using the same or a different provider.
   */
  services: { {{#if services.includes('openai')}}
    openai: services.openai({
      apiKey: env.get('OPENAI_API_KEY'),
      model: env.get('OPENAI_MODEL', 'gpt-3.5-turbo'),
      embeddingModel: env.get('OPENAI_EMBEDDING_MODEL', 'text-embedding-ada-002'),
      maxTokens: env.get('OPENAI_MAX_TOKENS', 1000),
      temperature: env.get('OPENAI_TEMPERATURE', 0.7),
    }),{{/if}}{{#if services.includes('gemini')}}
    gemini: services.gemini({
      apiKey: env.get('GEMINI_API_KEY'),
      model: env.get('GEMINI_MODEL', 'gemini-pro'),
      embeddingModel: env.get('GEMINI_EMBEDDING_MODEL', 'embedding-001'),
      maxTokens: env.get('GEMINI_MAX_TOKENS', 1000),
      temperature: env.get('GEMINI_TEMPERATURE', 0.7),
    }),{{/if}}
  },
})

export default aiConfig

declare module '@awalsolution/adonis-ai/types' {
  export interface AIServices extends InferAIServices<typeof aiConfig> {}
}
